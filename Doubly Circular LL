class Node:
    def __init__(self, data):
        self.data = data
        self.prev = None
        self.next = None

class DoublyCircularLinkedList:
    def __init__(self):
        self.head = None

    def append(self, data):
        new_node = Node(data)
        if not self.head:
            self.head = new_node
            new_node.next = new_node
            new_node.prev = new_node
        else:
            last_node = self.head.prev
            last_node.next = new_node
            new_node.prev = last_node
            new_node.next = self.head
            self.head.prev = new_node

    def prepend(self, data):
        new_node = Node(data)
        if not self.head:
            self.head = new_node
            new_node.next = new_node
            new_node.prev = new_node
        else:
            last_node = self.head.prev
            new_node.next = self.head
            self.head.prev = new_node
            new_node.prev = last_node
            last_node.next = new_node
            self.head = new_node

    def print_list(self):
        if not self.head:
            return
        curr_node = self.head
        while curr_node.next != self.head:
            print(curr_node.data)
            curr_node = curr_node.next
        print(curr_node.data)
